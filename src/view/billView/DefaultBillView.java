/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package view.billView;

import dao.BillDAO;
import java.awt.Component;
import java.text.NumberFormat;
import java.util.List;
import java.util.Locale;
import java.util.Vector;
import javax.swing.JTable;
import javax.swing.ListSelectionModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumnModel;
import model.Bill;
import model.Customer;
/**
 *
 * @author Admin
 */
public class DefaultBillView extends javax.swing.JPanel {
    private List<Bill> list;
    private BillDAO bd = new BillDAO();
    public static int cus = -1;
    public DefaultBillView() {
        initComponents();
        list = bd.selectAll();
        setTableCustomer();
        TableCellRenderer renderer = new DetailBillView.CurrencyRenderer();
        billTable.getColumnModel().getColumn(4).setCellRenderer(renderer);
        billTable.getColumnModel().getColumn(5).setCellRenderer(renderer);
        billTable.getColumnModel().getColumn(6).setCellRenderer(renderer);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")                  
 private void setTableCustomer() {
        DefaultTableModel dtm = new DefaultTableModel() {

            @Override
            public boolean isCellEditable(int row, int column) {
                //all cells false
                return false;
            }
        };
        billTable.setModel(dtm);
        ListSelectionModel lsm = billTable.getSelectionModel();
        lsm.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        lsm.addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent e) {
                setSelected();
            }
        });
        setColumnName(dtm);
        setColumnWidths(billTable,  400, 100, 100,100, 200, 200, 200);
        setRow(dtm);
    }
    private void setSelected(){
        int row = billTable.getSelectedRow();
        String name = (String) billTable.getValueAt(row, 0);
        for(Bill c:list){
            if(c.getMaKhachHang().getTenKhachHang().equals(name)){
                cus = c.getMaKhachHang().getMaKhachHang();
            }
        }
    }
    private void setColumnName(DefaultTableModel dtm) {
        dtm.addColumn("Tên Khách Hàng");
        dtm.addColumn("Năm Sinh");
        dtm.addColumn("Số Điện Thoại");
        dtm.addColumn("Phòng");
        dtm.addColumn("Tiền Phòng");
        dtm.addColumn("Tiền Dịch Vụ");
        dtm.addColumn("Tổng Tiền");
    }

    public void setColumnWidths(JTable table, int... widths) {
        TableColumnModel columnModel = table.getColumnModel();
        for (int i = 0; i < widths.length; i++) {
            if (i < columnModel.getColumnCount()) {
                columnModel.getColumn(i).setMaxWidth(widths[i]);
            } else {
                break;
            }
        }
    }

    public void setRow(DefaultTableModel dfm) {
        Vector v = null;
        for (Bill c : list) {
            v = new Vector();
            v.removeAllElements();
            v.add(c.getMaKhachHang().getTenKhachHang());
            v.add(c.getMaKhachHang().getNamSinh());
            v.add(c.getMaKhachHang().getSdt());
            v.add(c.getMaKhachHang().getMaPhong().getName());
            v.add(c.getDangKi().getTongTien());
            v.add(c.getServicePrice());
            v.add(c.getDangKi().getTongTien()+ c.getServicePrice());
            dfm.addRow(v);
        }

    }

    public static int getCus() {
        return cus;
    }

    public static void setCus() {
        cus = -1;
    }
     static class CurrencyRenderer extends DefaultTableCellRenderer {
        private static final NumberFormat FORMAT = NumberFormat.getCurrencyInstance(new Locale("vi", "VN"));

        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
            if (value instanceof Double) {
                value = FORMAT.format(value);
            }
            return super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
        }
    }
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        billTable = new javax.swing.JTable();

        billTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(billTable);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1078, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 608, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable billTable;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
